{"version":3,"sources":["components/ClickyCard/index.js","components/Wrapper/index.js","components/Title/index.js","App.js","serviceWorker.js","index.js"],"names":["ClickyCard","props","className","selected","onClick","selectCard","id","alt","image","src","Wrapper","children","Title","href","status","score","topScore","App","state","friends","shuffle","i","length","j","Math","floor","random","temp","setState","reset","map","friend","update","forEach","console","log","this","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"y9BAaeA,MAVf,SAAoBC,GAChB,OACI,yBAAKC,UAAU,OAAOC,SAAUF,EAAME,SAAUC,QAAS,kBAAMH,EAAMI,WAAWJ,EAAMK,MAClF,yBAAKJ,UAAU,iBACX,yBAAKK,IAAKN,EAAMO,MAAOC,IAAKR,EAAMO,W,MCGnCE,MAPf,SAAiBT,GACb,OACI,yBAAKC,UAAU,WAAWD,EAAMU,W,MCYzBC,MAdf,SAAeX,GACX,OACI,yBAAKC,UAAU,UACX,4BACI,wBAAIA,UAAU,SACV,uBAAGW,KAAK,KAAR,gBAEJ,wBAAIX,UAAU,IAAID,EAAMa,QACxB,sCAAYb,EAAMc,MAAlB,iBAAuCd,EAAMe,a,OCJzDD,EAAQ,EACRC,EAAW,EACXF,EAAS,yBAsEEG,E,2MAnEbC,MAAQ,CACNC,W,EAIFC,QAAU,SAACD,GACT,IAAK,IAAIE,EAAIF,EAAQG,OAAS,EAAGD,EAAI,EAAGA,IAAK,CAC3C,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,SAAWL,GAC/BM,EAAOR,EAAQE,GACrBF,EAAQE,GAAKF,EAAQI,GACrBJ,EAAQI,GAAKI,EAEf,EAAKC,SAAS,CAAET,a,EAIlBU,MAAQ,WACN,IAAMV,EAAU,EAAKD,MAAMC,QAAQW,KAAI,SAAAC,GAErC,OADAA,EAAO5B,UAAW,EACX4B,KAET,EAAKX,QAAQD,I,EAIfa,OAAS,kBAAM,EAAKZ,QAAL,YAAiB,EAAKF,MAAMC,W,EAE3Cd,WAAa,SAAAC,GAEX,EAAKY,MAAMC,QAAQc,SAAQ,SAAAF,GAczB,OAbIA,EAAOzB,KAAOA,IACZyB,EAAO5B,UACTW,EAAS,wBACTC,EAAQ,EACR,EAAKc,UAELE,EAAO5B,UAAW,EAClBW,EAAS,gBACTC,EACSC,EAAYA,EAAWD,EAAQmB,QAAQC,IAAR,oBACxC,EAAKH,WAGFD,M,wEAID,IAAD,OACP,OACE,6BACE,kBAAC,EAAD,CAAOhB,MAAOA,EAAOC,SAAUA,EAAUF,OAAQA,GAAjD,eACA,kBAAC,EAAD,KACGsB,KAAKlB,MAAMC,QAAQW,KAAI,SAAAC,GAAM,OAC5B,kBAAC,EAAD,CACE1B,WAAY,EAAKA,WACjBC,GAAIyB,EAAOzB,GACX+B,IAAKN,EAAOzB,GACZE,MAAOuB,EAAOvB,MACdL,SAAU4B,EAAO5B,oB,GA3DbmC,aCCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,c","file":"static/js/main.bfede85a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction ClickyCard(props) {\r\n    return (\r\n        <div className=\"card\" selected={props.selected} onClick={() => props.selectCard(props.id)}>\r\n            <div className=\"img-container\">\r\n                <img alt={props.image} src={props.image} />\r\n            </div>           \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ClickyCard;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n    return (\r\n        <div className=\"wrapper\">{props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Wrapper;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Title(props) {\r\n    return (\r\n        <nav className=\"navbar\">\r\n            <ul>\r\n                <li className=\"brand\">\r\n                    <a href=\"/\">Memory Game</a>\r\n                </li>\r\n                <li className=\"\">{props.status}</li>\r\n                <li>Score: {props.score} | Top Score: {props.topScore}</li>\r\n            </ul>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Title;","import React, { Component } from 'react';\nimport ClickyCard from './components/ClickyCard';\nimport Wrapper from './components/Wrapper';\nimport Title from \"./components/Title\";\nimport friends from './friends.json';\n// import './App.css';\n\nlet score = 0;\nlet topScore = 0;\nlet status = \"Click a card to begin!\";\n\nclass App extends Component {\n  state = {\n    friends\n  };\n\n  // Fisher-Yates Shuffle\n  shuffle = (friends) => {\n    for (let i = friends.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * i);\n      const temp = friends[i];\n      friends[i] = friends[j];\n      friends[j] = temp;\n    }\n    this.setState({ friends });\n  }\n\n  // Game reset - set all cards to unselected and then shuffle them\n  reset = () => {\n    const friends = this.state.friends.map(friend => {\n      friend.selected = false;\n      return friend;\n    });\n    this.shuffle(friends);\n  }\n\n  // Just shuffle the cards and keep playing the current game\n  update = () => this.shuffle([...this.state.friends]);\n\n  selectCard = id => {\n    // Filter this.state.friends for friends with an id equal to the passed in id and evaluate selected status\n    this.state.friends.forEach(friend => {\n      if (friend.id === id) {\n        if (friend.selected) {\n          status = \"You Lost - Try again!\";\n          score = 0;\n          this.reset();\n        } else {\n          friend.selected = true;\n          status = \"Good Guess!\";\n          score++;\n          (score > topScore) ? topScore = score : console.log(`topScore > score`);\n          this.update();\n        }\n      }\n      return friend;\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <Title score={score} topScore={topScore} status={status}>Memory Game</Title>\n        <Wrapper>\n          {this.state.friends.map(friend => (\n            <ClickyCard\n              selectCard={this.selectCard}\n              id={friend.id}\n              key={friend.id}\n              image={friend.image}\n              selected={friend.selected}\n            />\n          ))}\n        </Wrapper>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}